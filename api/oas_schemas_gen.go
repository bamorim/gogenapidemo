// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"

	"github.com/go-faster/errors"
)

func (s *ErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// Ref: #/components/schemas/AnalyzeResult
type AnalyzeResult struct {
	ID       string `json:"id"`
	Analysis string `json:"analysis"`
}

// GetID returns the value of ID.
func (s *AnalyzeResult) GetID() string {
	return s.ID
}

// GetAnalysis returns the value of Analysis.
func (s *AnalyzeResult) GetAnalysis() string {
	return s.Analysis
}

// SetID sets the value of ID.
func (s *AnalyzeResult) SetID(val string) {
	s.ID = val
}

// SetAnalysis sets the value of Analysis.
func (s *AnalyzeResult) SetAnalysis(val string) {
	s.Analysis = val
}

// Ref: #/components/schemas/Error
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *Error) GetCode() int32 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *Error) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *Error) SetCode(val int32) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val string) {
	s.Message = val
}

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val Error) {
	s.Response = val
}

// NewOptInt32 returns new OptInt32 with value set to v.
func NewOptInt32(v int32) OptInt32 {
	return OptInt32{
		Value: v,
		Set:   true,
	}
}

// OptInt32 is optional int32.
type OptInt32 struct {
	Value int32
	Set   bool
}

// IsSet returns true if OptInt32 was set.
func (o OptInt32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt32) Reset() {
	var v int32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt32) SetTo(v int32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt32) Get() (v int32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt32) Or(d int32) int32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWidgetUpdateRequestColor returns new OptWidgetUpdateRequestColor with value set to v.
func NewOptWidgetUpdateRequestColor(v WidgetUpdateRequestColor) OptWidgetUpdateRequestColor {
	return OptWidgetUpdateRequestColor{
		Value: v,
		Set:   true,
	}
}

// OptWidgetUpdateRequestColor is optional WidgetUpdateRequestColor.
type OptWidgetUpdateRequestColor struct {
	Value WidgetUpdateRequestColor
	Set   bool
}

// IsSet returns true if OptWidgetUpdateRequestColor was set.
func (o OptWidgetUpdateRequestColor) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWidgetUpdateRequestColor) Reset() {
	var v WidgetUpdateRequestColor
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWidgetUpdateRequestColor) SetTo(v WidgetUpdateRequestColor) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWidgetUpdateRequestColor) Get() (v WidgetUpdateRequestColor, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWidgetUpdateRequestColor) Or(d WidgetUpdateRequestColor) WidgetUpdateRequestColor {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Widget is a nice thing to have.
// Ref: #/components/schemas/Widget
type Widget struct {
	ID     string      `json:"id"`
	Weight int32       `json:"weight"`
	Color  WidgetColor `json:"color"`
}

// GetID returns the value of ID.
func (s *Widget) GetID() string {
	return s.ID
}

// GetWeight returns the value of Weight.
func (s *Widget) GetWeight() int32 {
	return s.Weight
}

// GetColor returns the value of Color.
func (s *Widget) GetColor() WidgetColor {
	return s.Color
}

// SetID sets the value of ID.
func (s *Widget) SetID(val string) {
	s.ID = val
}

// SetWeight sets the value of Weight.
func (s *Widget) SetWeight(val int32) {
	s.Weight = val
}

// SetColor sets the value of Color.
func (s *Widget) SetColor(val WidgetColor) {
	s.Color = val
}

type WidgetColor string

const (
	WidgetColorRed  WidgetColor = "red"
	WidgetColorBlue WidgetColor = "blue"
)

// AllValues returns all WidgetColor values.
func (WidgetColor) AllValues() []WidgetColor {
	return []WidgetColor{
		WidgetColorRed,
		WidgetColorBlue,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WidgetColor) MarshalText() ([]byte, error) {
	switch s {
	case WidgetColorRed:
		return []byte(s), nil
	case WidgetColorBlue:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WidgetColor) UnmarshalText(data []byte) error {
	switch WidgetColor(data) {
	case WidgetColorRed:
		*s = WidgetColorRed
		return nil
	case WidgetColorBlue:
		*s = WidgetColorBlue
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The template for omitting properties.
// Ref: #/components/schemas/WidgetCreateRequest
type WidgetCreateRequest struct {
	Weight int32                    `json:"weight"`
	Color  WidgetCreateRequestColor `json:"color"`
}

// GetWeight returns the value of Weight.
func (s *WidgetCreateRequest) GetWeight() int32 {
	return s.Weight
}

// GetColor returns the value of Color.
func (s *WidgetCreateRequest) GetColor() WidgetCreateRequestColor {
	return s.Color
}

// SetWeight sets the value of Weight.
func (s *WidgetCreateRequest) SetWeight(val int32) {
	s.Weight = val
}

// SetColor sets the value of Color.
func (s *WidgetCreateRequest) SetColor(val WidgetCreateRequestColor) {
	s.Color = val
}

type WidgetCreateRequestColor string

const (
	WidgetCreateRequestColorRed  WidgetCreateRequestColor = "red"
	WidgetCreateRequestColorBlue WidgetCreateRequestColor = "blue"
)

// AllValues returns all WidgetCreateRequestColor values.
func (WidgetCreateRequestColor) AllValues() []WidgetCreateRequestColor {
	return []WidgetCreateRequestColor{
		WidgetCreateRequestColorRed,
		WidgetCreateRequestColorBlue,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WidgetCreateRequestColor) MarshalText() ([]byte, error) {
	switch s {
	case WidgetCreateRequestColorRed:
		return []byte(s), nil
	case WidgetCreateRequestColorBlue:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WidgetCreateRequestColor) UnmarshalText(data []byte) error {
	switch WidgetCreateRequestColor(data) {
	case WidgetCreateRequestColorRed:
		*s = WidgetCreateRequestColorRed
		return nil
	case WidgetCreateRequestColorBlue:
		*s = WidgetCreateRequestColorBlue
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/WidgetList
type WidgetList struct {
	Items []Widget `json:"items"`
}

// GetItems returns the value of Items.
func (s *WidgetList) GetItems() []Widget {
	return s.Items
}

// SetItems sets the value of Items.
func (s *WidgetList) SetItems(val []Widget) {
	s.Items = val
}

// Ref: #/components/schemas/WidgetUpdateRequest
type WidgetUpdateRequest struct {
	Weight OptInt32                    `json:"weight"`
	Color  OptWidgetUpdateRequestColor `json:"color"`
}

// GetWeight returns the value of Weight.
func (s *WidgetUpdateRequest) GetWeight() OptInt32 {
	return s.Weight
}

// GetColor returns the value of Color.
func (s *WidgetUpdateRequest) GetColor() OptWidgetUpdateRequestColor {
	return s.Color
}

// SetWeight sets the value of Weight.
func (s *WidgetUpdateRequest) SetWeight(val OptInt32) {
	s.Weight = val
}

// SetColor sets the value of Color.
func (s *WidgetUpdateRequest) SetColor(val OptWidgetUpdateRequestColor) {
	s.Color = val
}

type WidgetUpdateRequestColor string

const (
	WidgetUpdateRequestColorRed  WidgetUpdateRequestColor = "red"
	WidgetUpdateRequestColorBlue WidgetUpdateRequestColor = "blue"
)

// AllValues returns all WidgetUpdateRequestColor values.
func (WidgetUpdateRequestColor) AllValues() []WidgetUpdateRequestColor {
	return []WidgetUpdateRequestColor{
		WidgetUpdateRequestColorRed,
		WidgetUpdateRequestColorBlue,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WidgetUpdateRequestColor) MarshalText() ([]byte, error) {
	switch s {
	case WidgetUpdateRequestColorRed:
		return []byte(s), nil
	case WidgetUpdateRequestColorBlue:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WidgetUpdateRequestColor) UnmarshalText(data []byte) error {
	switch WidgetUpdateRequestColor(data) {
	case WidgetUpdateRequestColorRed:
		*s = WidgetUpdateRequestColorRed
		return nil
	case WidgetUpdateRequestColorBlue:
		*s = WidgetUpdateRequestColorBlue
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// WidgetsDeleteNoContent is response for WidgetsDelete operation.
type WidgetsDeleteNoContent struct{}
