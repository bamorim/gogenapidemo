// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// WidgetsAnalyze implements Widgets_analyze operation.
	//
	// Analyze a widget.
	//
	// POST /widgets/{id}/analyze
	WidgetsAnalyze(ctx context.Context, params WidgetsAnalyzeParams) (*AnalyzeResult, error)
	// WidgetsCreate implements Widgets_create operation.
	//
	// Create a widget.
	//
	// POST /widgets
	WidgetsCreate(ctx context.Context, req *WidgetCreateRequest) (*Widget, error)
	// WidgetsDelete implements Widgets_delete operation.
	//
	// Delete a widget.
	//
	// DELETE /widgets/{id}
	WidgetsDelete(ctx context.Context, params WidgetsDeleteParams) error
	// WidgetsList implements Widgets_list operation.
	//
	// List widgets.
	//
	// GET /widgets
	WidgetsList(ctx context.Context) (*WidgetList, error)
	// WidgetsRead implements Widgets_read operation.
	//
	// Read widgets.
	//
	// GET /widgets/{id}
	WidgetsRead(ctx context.Context, params WidgetsReadParams) (*Widget, error)
	// WidgetsUpdate implements Widgets_update operation.
	//
	// Update a widget.
	//
	// PATCH /widgets/{id}
	WidgetsUpdate(ctx context.Context, req *WidgetUpdateRequest, params WidgetsUpdateParams) (*Widget, error)
	// NewError creates *ErrorStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *ErrorStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
